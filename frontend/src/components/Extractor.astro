---
const baseURL = import.meta.env.PUBLIC_BASE_URL;
---

<div class="mx-auto" id="data" data-base-url={baseURL}>
    <p class="text-violet-400 font-bold text-center text-4xl select-none pt-20">
        Free - Online Email Extractor
    </p>

    <hr class="w-48 h-1 mx-auto bg-gray-500 border-0 rounded my-10" />
    <p class="text-center  text-slate-400 font-semibold select-none">
        <span class=" text-slate-500">Free <b class="text-green-500">online</b> tool to extract emails from any
            URL.
        </span>
        <br>
        <br>
        <span class="text-sm text-slate-500 font-mono">Press <b class="text-white">CMD + A</b> to select all
            results</span>
    </p>

    <div class="max-w-md mx-auto mt-10 select-none">
        <div class="relative">
            <div class="absolute inset-y-0 start-0 flex items-center ps-3 pointer-events-none">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                    stroke="currentColor" class="w-6 h-6">
                    <path stroke-linecap="round" stroke-linejoin="round"
                        d="M19.5 14.25v-2.625a3.375 3.375 0 0 0-3.375-3.375h-1.5A1.125 1.125 0 0 1 13.5 7.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H8.25m5.231 13.481L15 17.25m-4.5-15H5.625c-.621 0-1.125.504-1.125 1.125v16.5c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 0 0-9-9Zm3.75 11.625a2.625 2.625 0 1 1-5.25 0 2.625 2.625 0 0 1 5.25 0Z" />
                </svg>


            </div>
            <input type="search" x-model="input.url" x-on:change.debounce="extractEmails($event)"
                class="block font-mono w-full p-3 ps-10 text-sm text-slate-300 hover:text-slate-100 border border-gray-300 hover:border-gray-100 rounded-lg bg-gray-900 focus:outline-none"
                placeholder="https://" required />
            <button x-bind:disabled="loading.fetching" type="button" x-on:click="submit"
                class="text-white disabled:text-slate-400 absolute end-2.5 bottom-1.5 bg-blue-700 disabled:bg-gray-700 hover:bg-blue-800 focus:outline-none font-bold rounded-lg text-sm px-4 py-2">
                <template x-if="loading.fetching">
                    <svg aria-hidden="true" role="status" class="inline w-4 h-4 me-3 text-white animate-spin"
                        viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path
                            d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z"
                            fill="#E5E7EB"></path>
                        <path
                            d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z"
                            fill="currentColor"></path>
                    </svg>
                </template>
                <template x-if="!loading.fetching">
                    <span>Extract</span>
                </template>
                <template x-if="loading.fetching">
                    <span>Crawling</span>
                </template>
            </button>
        </div>
    </div>

    <span x-text="loading.error" class="text-red-500 text-sm text-center block mt-5"></span>
    <template x-if="loading.counterCrawls > 0">
        <div class="text-center text-sm pt-5">
            <span class="">CRAWLS #</span><span x-text="loading.counterCrawls"
                class=" text-green-300 font-bold"></span>
            <span class="pl-5">HITS #</span><span x-text="loading.counterHits"
                class=" text-green-500 font-bold"></span>
        </div>
        <div class="text-center text-sm pt-1 block">
            âž  <span x-text="loading.url" class="text-blue-300"></span>
        </div>
    </template>
    <template x-if="result.data.length > 0">
        <div class="overflow-x-auto mt-10 rounded xl:mr-32 xl:ml-32">
            <table class="w-full text-sm font-mono text-left text-gray-400">
                <thead class="text-xs uppercase bg-gray-700 text-gray-400">
                    <tr>
                        <th scope="col" class="px-6 py-3">#</th>
                        <th scope="col" class="px-6 py-3">Email</th>
                        <th scope="col" class="px-6 py-3">URL</th>
                    </tr>
                </thead>
                <tbody>
                    <template x-for="(item, index) in result.data">
                        <tr class="border-b bg-gray-800 border-gray-700">
                            <td class="px-6 py-4" x-text="result.data.length - index"> </td>
                            <th scope="row" class="px-6 py-4 font-medium text-white" x-text="item.email">
                            </th>
                            <td class="px-6 py-4" x-text="item.url"> </td>
                        </tr>
                    </template>
                </tbody>
            </table>
        </div>
    </template>
</div>

<script is:inline src="//unpkg.com/alpinejs"></script>
<script is:inline>
    const currentURL = window.location.origin;
    let baseURL =
        document.querySelector("[data-base-url]")?.getAttribute("data-base-url") ||
        currentURL;
    baseURL = baseURL.startsWith("http") ? baseURL : currentURL + baseURL;
    let input = {
        url: "",
    }
    let result = Alpine.reactive({
        data: [],
        progressURL: "",
    });
    let loading = Alpine.reactive({
        fetching: false,
        url: "",
        counterCrawls: 0,
        counterHits: 0,
        error: "",
    });
    const isURL = (str) => {
        const pattern = new RegExp(
            "^(https?:\\/\\/)?" + // protocol
            "((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|" + // domain name
            "((\\d{1,3}\\.){3}\\d{1,3}))" + // OR ip (v4) address
            "(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*" + // port and path
            "(\\?[;&a-z\\d%_.~+=-]*)?" + // query string
            "(\\#[-a-z\\d_]*)?$",
            "i"
        ); // fragment locator
        return !!pattern.test(str);
    };

    const extractEmails = async ($event) => {
        input.url = $event.target.value.trim();
        if (loading.fetching) {
            loading.error = "Processing error: Already processing another URL";
            return;
        }
        if (!isURL(input.url)) {
            loading.error = "Input error: Invalid URL";
            return;
        }
        result.data = [];
        loading.fetching = true;
        loading.url = input.url;
        loading.counterCrawls = 0;
        loading.counterHits = 0;
        loading.error = "";

        // stream api
        const response = await fetch(`${baseURL}/api/extract?url=${input.url}`);
        if (!response.ok) {
            loading.fetching = false;
            loading.url = "";
            loading.error = "Error: (" + response.status + ") " + response.statusText;
            return;
        }
        const reader = response.body.getReader();
        const decoder = new TextDecoder();
        while (true) {
            const {
                done,
                value
            } = await reader.read();
            if (done) {
                loading.fetching = false;
                loading.url = "";
                break;
            }
            let tsv = decoder.decode(value);

            for (let v of tsv.split("\n")) {
                v = v.replace(/^"|"$/g, "");
                split = v.split("_SPLIT_DELIMETER_");
                if (split.length !== 2) {
                    continue;
                }
                if (split[0] == "status") {
                    loading.counterCrawls++;
                    loading.url = split[1];
                }
                if (!split[0].includes("@")) {
                    continue;
                }
                if (
                    result.data.some(
                        (item) => item.email === split[0] && item.url === split[1]
                    )
                ) {
                    continue;
                }
                loading.counterHits++;
                result.data = [{
                    email: split[0],
                    url: split[1]
                }, ...result.data];
            }
        }
    };
    const submit = async () => {};
    const data = {
        input,
        extractEmails,
        submit,
    };
    document.getElementById("data").setAttribute("x-data", JSON.stringify(data));
    Alpine.start();
</script>

<style></style>
